<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>marabunta</title>
    <link>https://marabunta.io/</link>
    <description>Recent content on marabunta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Nov 2018 10:33:05 +0100</lastBuildDate>
    
	<atom:link href="https://marabunta.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How It Works</title>
      <link>https://marabunta.io/post/how-it-works/</link>
      <pubDate>Thu, 08 Nov 2018 10:33:05 +0100</pubDate>
      
      <guid>https://marabunta.io/post/how-it-works/</guid>
      <description>In a nutshell. The task life cycle could be summarized in the following steps:
 A task is submitted via an HTTP API The task will be stored in a database (MySQL) for keeping track of it Based on the schedule, when is time to run it will be moved to a Redis queue The task is dispatched via gRPC to the targets The status of the task will be updated in the database  The process is pretty straightforward one of the main design goals is to avoid unnecessary complexity, giving priority to performance and simple orchestration of the tasks at all cost as for the maintenance and scalability of the full system.</description>
    </item>
    
    <item>
      <title>Why</title>
      <link>https://marabunta.io/post/why/</link>
      <pubDate>Tue, 06 Nov 2018 15:13:13 +0100</pubDate>
      
      <guid>https://marabunta.io/post/why/</guid>
      <description>There are many good tools, frameworks offering multiple solutions for managing jobs, tasks, queues, etc, many of them are listed here http://queues.io/.
Technology changes and with this, new tools emerge. Days back you could be using gearman, these days probably nats.io or even ansible ad-hoc:
$ ansible all -a &amp;quot;ping -c3 1.1.1.1&amp;quot; -u devops --become  Just as an example that with multiple technologies the same result can be achieved, some relatively easy, others faster, etc.</description>
    </item>
    
    <item>
      <title>prototype</title>
      <link>https://marabunta.io/post/prototype/</link>
      <pubDate>Mon, 05 Nov 2018 11:02:09 +0100</pubDate>
      
      <guid>https://marabunta.io/post/prototype/</guid>
      <description>The big picture Tasks are stored in a MySQL, a worker (scheduler) periodically check the schedules and creates, updates or remove tasks from a live queue that uses redis, rabbitmq, nats, etc as a backend. One or more clients consume the queue and via a bidirectional gRPC stream dispatch the task to the proper client, if the task is finished, the client updates the result/status via gRPC Unary if not task is re-queued.</description>
    </item>
    
    <item>
      <title>Payload</title>
      <link>https://marabunta.io/post/payload/</link>
      <pubDate>Fri, 10 Nov 2017 00:31:54 +0100</pubDate>
      
      <guid>https://marabunta.io/post/payload/</guid>
      <description> The Schema </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://marabunta.io/about/</link>
      <pubDate>Fri, 30 Jun 2017 14:44:15 +0200</pubDate>
      
      <guid>https://marabunta.io/about/</guid>
      <description>What is marabunta? From its definition, marabunta is one of the names given to army ants.
The idea of the project is to create something similar applying, following nature knowledge and patterns using a client-server topology aiming to create a distributed task manager using gRPC at is core with an HTTP REST management interface.
 Think about it as if your whole infrastructure nodes where a bunch of ants at your command in where you could do distributed tasks using all your nodes at once, in a defined group or in a single node, keeping track of each task result and output.</description>
    </item>
    
  </channel>
</rss>