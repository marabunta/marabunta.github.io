<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on marabunta</title>
    <link>https://marabunta.io/post/</link>
    <description>Recent content in Posts on marabunta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Nov 2018 15:13:13 +0100</lastBuildDate>
    
	<atom:link href="https://marabunta.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why</title>
      <link>https://marabunta.io/post/why/</link>
      <pubDate>Tue, 06 Nov 2018 15:13:13 +0100</pubDate>
      
      <guid>https://marabunta.io/post/why/</guid>
      <description>There are many good tools, frameworks offering multiple solutions for managing jobs, tasks, queues, etc, many of them are listed here http://queues.io/.
Technology changes and with this, new tools emerge. Days back you could be using gearman, these days probably nats.io or even ansible ad-hoc:
$ ansible all -a &amp;quot;ping -c3 1.1.1.1&amp;quot; -u devops --become  Just as an example that with multiple technologies the same result can be achieved, some relatively easy, others faster, etc.</description>
    </item>
    
    <item>
      <title>prototype</title>
      <link>https://marabunta.io/post/prototype/</link>
      <pubDate>Mon, 05 Nov 2018 11:02:09 +0100</pubDate>
      
      <guid>https://marabunta.io/post/prototype/</guid>
      <description>The big picture Tasks are stored in a MySQL, a worker (scheduler) periodically check the schedules and creates, updates or remove tasks from a live queue that uses redis, rabbitmq, nats, etc as a backend. One or more clients consume the queue and via a bidirectional gRPC stream dispatch the task to the proper client, if the task is finished, the client updates the result/status via gRPC Unary if not task is re-queued.</description>
    </item>
    
  </channel>
</rss>